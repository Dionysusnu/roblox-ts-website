# Want to add your own roblox-ts package to this listing?
#
# Create a Pull Request adding your package as an entry to the bottom of this file,
# using the existing packages as an example of the expected format.

- name: "@rbxts/services"
  author: roblox-ts
  keywords: services import autoimport
  tabs: demo
  description: |-
    Exports most commonly used Roblox services. This makes them really easy to use.

    ***

    ```ts
    import { Players } from "@rbxts/services";
    Players.PlayerAdded.Connect(player =>
      print("Player was added!", player.Name),
    );
    ```

- name: "@rbxts/inspect"
  author: roblox-ts
  keywords: inspect debug display print
  tabs: demo
  description: |-
    A copy of [kikito's inspect.lua library](https://github.com/kikito/inspect.lua) with type definitions.

    ***

    ```ts
    import inspect = require("@rbxts/inspect");
    print(inspect([1, 2, 3]));
    ```

- name: "@rbxts/datastore2"
  author: roblox-ts
  keywords: datastore data store storage
  tabs: demo
  description: |-
    A copy of [Kampfkarren's DataStore2 library](https://devforum.roblox.com/t/how-to-use-datastore2-data-store-caching-and-data-loss-prevention/136317) with type definitions.

    ***

    ```ts
    import { ReplicatedStorage, Players } from "@rbxts/services";
    import DataStore2 = require("@rbxts/datastore2");

    Players.PlayerAdded.Connect(player => {
      const coinsStore = DataStore2<number>("coins", player);

      const remote = ReplicatedStorage.CoinAmount as RemoteEvent;
      function callRemote(value: number) {
        remote.FireClient(player, value);
      }

      // Fire a remote event to the player telling them how many coins they have.
      // If this is their first time playing the game, they'll start out with 100.
      callRemote(coinsStore.Get(100));

      // Everytime the coin store updates, we'll send the RemoteEvent again.
      coinsStore.OnUpdate(callRemote);
    });
    ```

- name: "@rbxts/resources"
  author: evaera
  keywords: assets resources load model models resource
  tabs: demo
  description: |-
    rbx-resources lets you easily access game assets and create named instances in your game.

    ***

    ```ts
    const event = getResource(RemoteEvent, "SomeRemoteEvent");
    const sword = getResource<Model>("Weapon", "Darkheart");
    const bindable = getLocalResource(BindableEvent, "FooBarBaz");
    ```

- name: "@rbxts/roact"
  author: roblox-ts
  keywords: roact ui react view layer
  tabs: demo
  description: |-
    TypeScript and JSX support for [Roact](https://github.com/Roblox/roact).

    ***

    ```tsx
    import * as Roact from "@rbxts/roact";

    const LocalPlayer = game.GetService("Players")
      .LocalPlayer as Player;
    const PlayerGui = LocalPlayer.FindFirstChildOfClass(
      "PlayerGui",
    );

    const tree = (
      <screengui>
        <textlabel
          Key="Label"
          Text="Hello, World!"
          Size={new UDim2(1, 0, 1, 0)}
        />
      </screengui>
    );

    Roact.mount(tree, PlayerGui, "HelloWorld");
    ```

- name: "@rbxts/t"
  author: osyrisrblx
  keywords: validation type checking user input
  tabs: demo
  description: |-
    t enables you to write complex type definitions and use them either at runtime or statically.
    Provides a robust set of tools to sanitize unknown data.
    Useful for making sure your remote events give the right data!

    ***

    ```ts
    // complex type definition
    const tPlayer = t.interface({
        name: t.string,
        score: t.number,
        data: t.interface({
            inventory: t.array(t.number),
            inventorySize: t.number,
        })
    });

    // runtime usage
    function bar(player: unknown) {
        if (tPlayer(player)) {
            print(player.data.inventorySize);
        }
    }

    // static usage
    type tPlayer = t.static<typeof tPlayer>;
    function foo(player: tPlayer) {
        print(player.data.inventorySize);
    }
    ```

- name: "@rbxts/net"
  author: Vorlias
  keywords: net networking remoteevent remotefunction data
  tabs: server events,client events,server functions,client functions
  description: |-
    Roblox Networking Library (rbx-net) is a useful library for abstracting Roblox networking.
    Not only does it make networking simpler, it also adds more functionality to remotes such as asynchronous function calls, result caching, invoking/calling groups of clients and much more.

    ***

    ```ts
    import Net from "@rbxts/net";

    // Create an Event
    const myRemote = Net.CreateEvent("EventName");

    // Create an event OOP style
    const myRemote = new Net.ServerEvent("EventName");

    // Connect events to listeners
    function onMyRemoteEvent(player: Player) {
      print(player, "called me! :D");
    }
    myRemote.Connect(onMyRemoteEvent);

    // Fire an event to a client
    myRemote.SendToPlayer(game.Players.Vorlias, "Hello, World!");

    // Fire an event to multiple clients
    myRemote.SendToPlayers([game.Players.Vorlias, game.Players.Osyris], "Hello, World!");

    // Fire an event to all clients
    myRemote.SendToAllPlayers("Hello, World!");
    ```
    ***
    ```ts
    import Net from "@rbxts/net";

    function onClientMyRemoteEvent() {
      print("The server called me!")
    }

    // await for client event, then connect
    const myRemote = await Net.WaitForClientEventAsync("EventName");
    myRemote.Connect(onClientMyRemoteEvent);

    // Get an event OOP style (Will error if doesn't exist, use Async methods!)
    const myRemote = new Net.ClientEvent("EventName");

    // wait for event (promise), then connect or if timeout - display message
    Net.WaitForClientEventAsync("EventName").then(event => {
      // connect the event
      event.Connect(onClientMyRemoteEvent);
    }, failMsg => warn(failMsg));

    // Send an event to the server!
    myRemote.SendToServer("Hi server! :D");
    ```

    ***

    ```ts
    import Net from "@rbxts/net";

    // Create a function
    const myFunction = Net.CreateFunction("FunctionName");

    // Create a function OOP style
    const myFunction = new Net.ServerFunction("FunctionName");

    // Call a client (await)
    const result = await myFunction.CallPlayerAsync("Hello?");

    // Call a client (promise)
    myFunction.CallPlayerAsync("Hello?").then(
      result => print(result),
      errorMsg => warn(errorMsg)
    );

    // Create a callback for when clients call the server
    myFunction.Callback = (player: Player) => {
      return player.Name:reverse(); // will return username reversed
    };

    // Set the amount of seconds the remote caches a return value when retrieved by client
    myFunction.ClientCache = 10; // 10 seconds
    ```
    ***
    ```ts
    import Net from "@rbxts/net";

    // Get a function OOP style (Will error if doesn't exist, use Async methods!)
    const myRemote = new Net.ClientFunction("EventName");

    // Get function (await)
    const myFunction = await Net.WaitForFunctionAsync("FunctionName");
    myFunction.Callback = () => {
      return "Hi from the server!";
    };

    // Get function (promise)
    const myFunction = Net.WaitForFunctionAsync("FunctionName").then(func => {
      // callback inside promise
      func.Callback = () => {
        return "Hi from the server!";
      };
    }, errorMsg => warn(errorMsg));

    // Create a callback for when the server calls the client
    myFunction.Callback = () => {
      return "hi I'm the client " + game.Players.LocalPlayer!.Name;
    };
    ```

- name: "@rbxts/datastore-light"
  author: Dog2puppy
  keywords: datastore data store storage
  tabs: demo
  description: |-
    A simple data store wrapper with automatic retry and types support.

    ***

    ```ts
    import { DataStore } from "@rbxts/datastore-light";

    let MainStore = new DataStore<string>("Main", "MyScope", math.huge); // Creates a new DataStore object with the type 'string', the name 'main', the scope 'MyScope' and an infinite amount of retries

    MainStore.set("hello", "hi");
    MainStore.get("hello"); // hi
    MainStore.remove("hello");
    ```

- name: "@rbxts/date"
  author: Validark
  keywords: date, time, formatter
  tabs: demo
  description: |-
    A reimplementation of the vanilla Lua os.date function built atop the one exposed by Roblox Lua

    ***

    ```ts
    // ISO 8601:
    print(Date("%FT%T")); // 2020-01-01T01:03:05
    print(Date("%Y-%m-%dT%H:%M:%S")); // 2020-01-01T01:03:05
    print(Date("%FT%T%#z")); // 2020-01-01T01:03:05-05:00

    // Time:
    print(Date("%T")); // 08:37:43

    // Date:
    print(Date("%D")); // 01/12/20

    // Also adds the ability to toggle padding by inserting a '#' like so:
    print(Date("%#x", os.time()));
    ```

- name: "@rbxts/signal"
  author: Validark
  keywords: Signal BindableEvent Bindable Bind

  tabs: demo
  description: |-
    Standard BindableEvent wrapper which passes values by reference instead of duplicating data

    ***

    ```ts
    const signal = new Signal();
    const strings = new Array<string>();

    signal.Connect((a: unknown) => print(a))

    print(strings) // table: 2BC04578
    signal.Fire(strings) // table: 2BC04578
    ```

- name: "@rbxts/tween"
  author: Validark
  keywords: bezier cubic-bezier curve interpolation interpolate easing ease lerp tween
  tabs: demo
  description: |-
    A library for writing efficient, simple interpolation code

    ***

    Here is the simplest form:

    This will return a Tween object. x will be a number along the Standard curve [0, 1]. The interpolation will last 2 seconds. Standard is the EasingFunction, which is the curve along which this interpolation will animate.
    ```ts
    Tween(2, Standard, x => print(x));
    ```
    More examples [here](https://github.com/Validark/Roblox-TS-Libraries/blob/master/rbx-tween/README.md)

- name: "@rbxts/extendable-resources"
  author: Validark
  keywords: resources RemoteEvents RemoteFunctions Remotes Folder Manager FolderManager
  tabs: demo
  description: |-
    A library for defining resources so it can be easily imported by other modules.

    ***

    ```ts
    import { ReplicatedStorage } from "@rbxts/services";
    import makeFolderManager from "@rbxts/extendable-resources";

    // creates/finds a folder named "RemoteEvents" in ReplicatedStorage
    // if it can't find a particular object, it will instantiate a RemoteEvent with the proper name
    const getRemoteEvent = makeFolderManager(ReplicatedStorage, "RemoteEvents", "RemoteEvent");

    export const Chatted = getRemoteEvent("Chatted");
    export const Cleanup = getRemoteEvent("Cleanup");

    // or in another library

    // Not necessary to specify "Model", but it will force returned values to be a Model type
    const getMap = makeFolderManager<"Model">(ReplicatedStorage, "Maps");

    export const SFOTH = getMap("SFOTH");
    export const City = getMap("City");

    // Then you can easily import the needed resources into another library
    import { Chatted, Cleanup } from "ReplicatedStorage/RemoteEventDefinitions";
    ```